package JavaCC;

/* Generated By:JavaCC: Do not edit this line. perl.java */
import java.io.*;

public class perl implements perlConstants {
//        public static final String DIR = 
//                "C:\\Users\\Fernando Guerrero\\Desktop\\Automatas-II\\AutomatasII\\src\\archivos"; 
        
        public static final String DIR = System.getProperty("user.dir").contains("AutomatasII\\dist")?
                System.getProperty("user.dir").replace("AutomatasII\\dist", "AutomatasII")+"\\src\\archivos":
                System.getProperty("user.dir")+"\\src\\archivos";
        
        public FileOutputStream Sint1;
        public DataOutputStream Sint2;
        public FileOutputStream Token1;
        public DataOutputStream Token2;
        public FileOutputStream Sem1;
        public DataOutputStream Sem2;
        public static String mensajeSint;
        public static String mensajeLex;
        public static String mensajeSem;

        public String ar[]=new String[1024];

        public void archSint_crear(String nombre_arch){
                try {
                        Sint1 = new FileOutputStream(nombre_arch);
                        Sint2 = new DataOutputStream(Sint1);
                } catch (IOException Ex){
                        System.err.println("No se creo el archivo correctamente");
                }
        }

        public void archSint_cerrar(){
                try {
                        Sint1.close();
                }catch (IOException Ex){
                        System.err.println("No se cerro corectamente");
                }
        }

        public void archSint_escribe(String Mensaje){
                try {
                        Sint2.writeBytes(Mensaje+"\u005cr");
                        Sint1.write('\u005cn');
                }catch(IOException Ex){
                        System.err.println("No se escribio correctamente");
                }
        }

        public void archtoken_crear(String nombre_arch){
                try {
                        Token1 = new FileOutputStream(nombre_arch);
                        Token2 = new DataOutputStream(Token1);
                }catch (IOException Ex){
                        System.err.println("No se creo el archivo correctamente");
                }
        }

        public void archtoken_cerrar(){
                try {
                        Token1.close();
                }
                catch (IOException Ex) {
                        System.err.println("No se cerro corectamente");
                }
        }

        public void archtoken_escribe(String Mensaje){
                try {
                        Token2.writeBytes(Mensaje+"\u005cr");
                        Token1.write('\u005cn');
                }
                catch(IOException Ex){
                        System.err.println("No se escribio correctamente");
                }
        }

        public void archSem_crear(String nombre_arch){
                try {
                        Sem1 = new FileOutputStream(nombre_arch);
                        Sem2 = new DataOutputStream(Sem1);
                } catch (IOException Ex){
                        System.err.println("No se creo el archivo correctamente");
                }
        }

        public void archSem_cerrar(){
                try {
                        Sem1.close();
                }catch (IOException Ex){
                        System.err.println("No se cerro corectamente");
                }
        }

        public void archSem_escribe(String Mensaje){
                try {
                        Sem2.writeBytes(Mensaje+"\u005cr");
                        Sem1.write('\u005cn');
                }catch(IOException Ex){
                        System.err.println("No se escribio correctamente");
                }
        }
        
        static void escribirContenido(String archivo, String contenido) throws FileNotFoundException, IOException {
            FileWriter f = new FileWriter(archivo);
            BufferedWriter b = new BufferedWriter(f);
            b.write(contenido, 0, contenido.length());
            b.close();
        }

        public static void main(String args[])   throws ParseException{
                System.out.println(DIR);
                //System.out.println(directorio);
                Interfaz f = new Interfaz();
                f.setSize(800, 600);
                f.setLocation(100, 100);
                f.setDefaultCloseOperation(3);
                f.setVisible(true);
                
//                perl analiza;
//                mensajeSint = "";
//                mensajeLex = "";
//                mensajeSem = "";
//                String ruta = "C:\\Users\\Fernando Guerrero\\Desktop\\Automatas-II\\AutomatasII\\src\\";
//                String[] a = {"C:\\Users\\Fernando Guerrero\\Desktop\\Automatas-II\\AutomatasII\\src\\archivos\\menu.pl"};
//                args = a;
//                Boolean band = true;
//                if(args.length == 0){
//                        System.err.println("Uso del programa: \u005c"java perl ejemplo.pl\u005c"");
//                }
//                else {
//                        if(args.length == 1) {
//                                try{
//                                        analiza = new perl (new java.io.FileInputStream(args[0]));
//                                        analiza.archSint_crear(ruta+"archivos\\ErrorSint.txt");
//                                        analiza.perl();
//                                        analiza.archSint_escribe(mensajeSint);
//                                        analiza.archSint_cerrar();
//                                        analiza.archSem_crear(ruta+"archivos\\ErrorSem.txt");
//                                        analiza.archSem_escribe(mensajeSem);
//                                        analiza.archSem_cerrar();
//                                }catch (java.io.FileNotFoundException e){
//                                        System.out.println("No se pudo leer el archivo :   " + args[0] + " ");
//                                        band = false;
//                                }
//                                try{
//                                        analiza = new perl (new java.io.FileInputStream(args[0]));
//                                        analiza.archtoken_crear(ruta+"archivos\\Tokens.txt");
//                                        analiza.input(analiza);
//                                        analiza.archtoken_cerrar();
//                                        analiza.archtoken_crear(ruta+"archivos\\ErrorLex.txt");
//                                        analiza.archtoken_escribe(mensajeLex);
//                                        analiza.archtoken_cerrar();
//                                } catch (java.io.FileNotFoundException e){
//                                        System.out.println("No se pudo leer el archivo :   " + args[0] + " ");
//                                        band = false;
//                                }
//                        }
//                        else{
//                                System.out.println("Formato: java perl ejemplo.pl");
//                        }
//                        if(mensajeLex.isEmpty() && mensajeSint.isEmpty() && mensajeSem.isEmpty() && band)
//                                System.out.println("Compilacion exitosa.");
//                        else {
//                                if(!mensajeLex.isEmpty()) System.out.println("Hay errores lexicos.");
//                                if(!mensajeSint.isEmpty()) System.out.println("Hay errores sintacticos.");
//                                if(!mensajeSem.isEmpty()) System.out.println("Hay errores semanticos.");
//                        }
//                }
        }

        void EscribeSintactico(String mensaje){
                archSint_escribe(mensaje);
        }

  final public void input(perl analiza) throws ParseException {
                          String mensaje;
    label_1:
    while (true) {
      mensaje = Checa();
                analiza.archtoken_escribe(mensaje);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case pbreak:
      case pcontinue:
      case pdefault:
      case pdelete:
      case pdo:
      case pelse:
      case pelsif:
      case pfor:
      case pforeach:
      case pgiven:
      case pif:
      case pmy:
      case pour:
      case pprint:
      case preturn:
      case pstdin:
      case puse:
      case punless:
      case puntil:
      case pwhen:
      case pwhile:
      case parenizq:
      case parender:
      case llaveizq:
      case llaveder:
      case corizq:
      case corder:
      case puncoma:
      case dospuntos:
      case coma:
      case punto:
      case asigna:
      case mayor:
      case menor:
      case menigual:
      case mayigual:
      case menorcad:
      case mayorcad:
      case menigualcad:
      case mayigualcad:
      case igual:
      case dif:
      case igualcad:
      case difcad:
      case suma:
      case resta:
      case div:
      case cambioizq:
      case cambioder:
      case producto:
      case residuo:
      case exp:
      case inc:
      case dec:
      case nobin:
      case nolog:
      case not:
      case ybin:
      case obin:
      case xor:
      case ylog:
      case olog:
      case odeflog:
      case and:
      case or:
      case sumasigna:
      case restasigna:
      case prodasigna:
      case divasigna:
      case resasigna:
      case yasigna:
      case oasigna:
      case xorasigna:
      case camizqasig:
      case camderasig:
      case entero:
      case real:
      case ident:
      case cadenainter:
      case cadena:
      case c_noval:
      case cad_noval:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  final public String Checa() throws ParseException {
                Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case pbreak:
      t = jj_consume_token(pbreak);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada break");}
      break;
    case pcontinue:
      t = jj_consume_token(pcontinue);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada continue");}
      break;
    case pdefault:
      t = jj_consume_token(pdefault);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada default");}
      break;
    case pdelete:
      t = jj_consume_token(pdelete);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada delete");}
      break;
    case pdo:
      t = jj_consume_token(pdo);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada do");}
      break;
    case pelse:
      t = jj_consume_token(pelse);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada else");}
      break;
    case pelsif:
      t = jj_consume_token(pelsif);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada elsif");}
      break;
    case pfor:
      t = jj_consume_token(pfor);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada for");}
      break;
    case pforeach:
      t = jj_consume_token(pforeach);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada foreach");}
      break;
    case pgiven:
      t = jj_consume_token(pgiven);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada given");}
      break;
    case pif:
      t = jj_consume_token(pif);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada if");}
      break;
    case pmy:
      t = jj_consume_token(pmy);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada my");}
      break;
    case pour:
      t = jj_consume_token(pour);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada our");}
      break;
    case pprint:
      t = jj_consume_token(pprint);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada print");}
      break;
    case preturn:
      t = jj_consume_token(preturn);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada return");}
      break;
    case pstdin:
      t = jj_consume_token(pstdin);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada <STDIN>");}
      break;
    case puse:
      t = jj_consume_token(puse);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada use");}
      break;
    case punless:
      t = jj_consume_token(punless);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada unless");}
      break;
    case puntil:
      t = jj_consume_token(puntil);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada until");}
      break;
    case pwhile:
      t = jj_consume_token(pwhile);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada while");}
      break;
    case pwhen:
      t = jj_consume_token(pwhen);
      {if (true) return ( t.image +"\u005ct\u005ct Palabra reservada pwhen");}
      break;
    case puncoma:
      t = jj_consume_token(puncoma);
      {if (true) return ( t.image +"\u005ct\u005ct Simbolo ;");}
      break;
    case dospuntos:
      t = jj_consume_token(dospuntos);
      {if (true) return ( t.image +"\u005ct\u005ct Simbolo :");}
      break;
    case coma:
      t = jj_consume_token(coma);
      {if (true) return ( t.image +"\u005ct\u005ct Simbolo ,");}
      break;
    case punto:
      t = jj_consume_token(punto);
      {if (true) return ( t.image +"\u005ct\u005ct Simbolo .");}
      break;
    case parenizq:
      t = jj_consume_token(parenizq);
      {if (true) return ( t.image +"\u005ct\u005ct Operador (");}
      break;
    case parender:
      t = jj_consume_token(parender);
      {if (true) return ( t.image +"\u005ct\u005ct Operador )");}
      break;
    case corizq:
      t = jj_consume_token(corizq);
      {if (true) return ( t.image +"\u005ct\u005ct Operador [");}
      break;
    case corder:
      t = jj_consume_token(corder);
      {if (true) return ( t.image +"\u005ct\u005ct Operador ]");}
      break;
    case llaveizq:
      t = jj_consume_token(llaveizq);
      {if (true) return ( t.image +"\u005ct\u005ct Operador {");}
      break;
    case llaveder:
      t = jj_consume_token(llaveder);
      {if (true) return ( t.image +"\u005ct\u005ct Operador }");}
      break;
    case asigna:
      t = jj_consume_token(asigna);
      {if (true) return ( t.image +"\u005ct\u005ct Operador = ");}
      break;
    case mayor:
      t = jj_consume_token(mayor);
      {if (true) return ( t.image +"\u005ct\u005ct Operador > ");}
      break;
    case menor:
      t = jj_consume_token(menor);
      {if (true) return ( t.image +"\u005ct\u005ct Operador < ");}
      break;
    case menigual:
      t = jj_consume_token(menigual);
      {if (true) return ( t.image +"\u005ct\u005ct Operador <= ");}
      break;
    case mayigual:
      t = jj_consume_token(mayigual);
      {if (true) return ( t.image +"\u005ct\u005ct Operador >= ");}
      break;
    case mayorcad:
      t = jj_consume_token(mayorcad);
      {if (true) return ( t.image +"\u005ct\u005ct Operador gt ");}
      break;
    case menorcad:
      t = jj_consume_token(menorcad);
      {if (true) return ( t.image +"\u005ct\u005ct Operador lt ");}
      break;
    case menigualcad:
      t = jj_consume_token(menigualcad);
      {if (true) return ( t.image +"\u005ct\u005ct Operador le ");}
      break;
    case mayigualcad:
      t = jj_consume_token(mayigualcad);
      {if (true) return ( t.image +"\u005ct\u005ct Operador ge ");}
      break;
    case suma:
      t = jj_consume_token(suma);
      {if (true) return ( t.image +"\u005ct\u005ct Operador + ");}
      break;
    case resta:
      t = jj_consume_token(resta);
      {if (true) return ( t.image +"\u005ct\u005ct Operador - ");}
      break;
    case div:
      t = jj_consume_token(div);
      {if (true) return ( t.image +"\u005ct\u005ct Operador / ");}
      break;
    case producto:
      t = jj_consume_token(producto);
      {if (true) return ( t.image +"\u005ct\u005ct Operador * ");}
      break;
    case residuo:
      t = jj_consume_token(residuo);
      {if (true) return ( t.image +"\u005ct\u005ct Operador % ");}
      break;
    case exp:
      t = jj_consume_token(exp);
      {if (true) return ( t.image +"\u005ct\u005ct Operador ** ");}
      break;
    case cambioizq:
      t = jj_consume_token(cambioizq);
      {if (true) return ( t.image +"\u005ct\u005ct Operador << ");}
      break;
    case cambioder:
      t = jj_consume_token(cambioder);
      {if (true) return ( t.image +"\u005ct\u005ct Operador >> ");}
      break;
    case inc:
      t = jj_consume_token(inc);
      {if (true) return ( t.image +"\u005ct\u005ct Operador ++ ");}
      break;
    case dec:
      t = jj_consume_token(dec);
      {if (true) return ( t.image +"\u005ct\u005ct Operador -- ");}
      break;
    case nobin:
      t = jj_consume_token(nobin);
      {if (true) return ( t.image +"\u005ct\u005ct Operador ~ ");}
      break;
    case nolog:
      t = jj_consume_token(nolog);
      {if (true) return ( t.image +"\u005ct\u005ct Operador ! ");}
      break;
    case not:
      t = jj_consume_token(not);
      {if (true) return ( t.image +"\u005ct\u005ct Operador not ");}
      break;
    case igual:
      t = jj_consume_token(igual);
      {if (true) return ( t.image +"\u005ct\u005ct Operador == ");}
      break;
    case dif:
      t = jj_consume_token(dif);
      {if (true) return ( t.image +"\u005ct\u005ct Operador != ");}
      break;
    case igualcad:
      t = jj_consume_token(igualcad);
      {if (true) return ( t.image +"\u005ct\u005ct Operador eq ");}
      break;
    case difcad:
      t = jj_consume_token(difcad);
      {if (true) return ( t.image +"\u005ct\u005ct Operador ne ");}
      break;
    case ybin:
      t = jj_consume_token(ybin);
      {if (true) return ( t.image +"\u005ct\u005ct Operador binario & ");}
      break;
    case obin:
      t = jj_consume_token(obin);
      {if (true) return ( t.image +"\u005ct\u005ct Operador binario | ");}
      break;
    case xor:
      t = jj_consume_token(xor);
      {if (true) return ( t.image +"\u005ct\u005ct Operador binario ~| ");}
      break;
    case ylog:
      t = jj_consume_token(ylog);
      {if (true) return ( t.image +"\u005ct\u005ct Operador logico && ");}
      break;
    case olog:
      t = jj_consume_token(olog);
      {if (true) return ( t.image +"\u005ct\u005ct Operador logico || ");}
      break;
    case odeflog:
      t = jj_consume_token(odeflog);
      {if (true) return ( t.image +"\u005ct\u005ct Operador logico // ");}
      break;
    case and:
      t = jj_consume_token(and);
      {if (true) return ( t.image +"\u005ct\u005ct Operador logico and ");}
      break;
    case or:
      t = jj_consume_token(or);
      {if (true) return ( t.image +"\u005ct\u005ct Operador logico or ");}
      break;
    case sumasigna:
      t = jj_consume_token(sumasigna);
      {if (true) return ( t.image +"\u005ct\u005ct Operador asignacion += ");}
      break;
    case restasigna:
      t = jj_consume_token(restasigna);
      {if (true) return ( t.image +"\u005ct\u005ct Operador asignacion -= ");}
      break;
    case prodasigna:
      t = jj_consume_token(prodasigna);
      {if (true) return ( t.image +"\u005ct\u005ct Operador asignacion *= ");}
      break;
    case divasigna:
      t = jj_consume_token(divasigna);
      {if (true) return ( t.image +"\u005ct\u005ct Operador asignacion /= ");}
      break;
    case resasigna:
      t = jj_consume_token(resasigna);
      {if (true) return ( t.image +"\u005ct\u005ct Operador asignacion %= ");}
      break;
    case yasigna:
      t = jj_consume_token(yasigna);
      {if (true) return ( t.image +"\u005ct\u005ct Operador asignacion &= ");}
      break;
    case oasigna:
      t = jj_consume_token(oasigna);
      {if (true) return ( t.image +"\u005ct\u005ct Operador asignacion |= ");}
      break;
    case xorasigna:
      t = jj_consume_token(xorasigna);
      {if (true) return ( t.image +"\u005ct\u005ct Operador asignacion ~|= ");}
      break;
    case camizqasig:
      t = jj_consume_token(camizqasig);
      {if (true) return ( t.image +"\u005ct\u005ct Operador asignacion <<= ");}
      break;
    case camderasig:
      t = jj_consume_token(camderasig);
      {if (true) return ( t.image +"\u005ct\u005ct Operador asignacion >>= ");}
      break;
    case ident:
      t = jj_consume_token(ident);
      {if (true) return ( t.image +"\u005ct\u005ct Identificador ");}
      break;
    case entero:
      t = jj_consume_token(entero);
      {if (true) return ( t.image +"\u005ct\u005ct Numero Entero ");}
      break;
    case real:
      t = jj_consume_token(real);
      {if (true) return ( t.image +"\u005ct\u005ct Numero real ");}
      break;
    case cadena:
      t = jj_consume_token(cadena);
      {if (true) return ( t.image +"\u005ct\u005ct Cadena sin interpolacion ");}
      break;
    case cadenainter:
      t = jj_consume_token(cadenainter);
      {if (true) return ( t.image +"\u005ct\u005ct Cadena con interpolacion ");}
      break;
    case c_noval:
      t = jj_consume_token(c_noval);
      mensajeLex+= t.image+"\u005ct\u005ct Caracter no valido. Linea "+ token.beginLine+"\u005cn"; {if (true) return "";}
      break;
    case cad_noval:
      t = jj_consume_token(cad_noval);
      mensajeLex+= t.image +"\u005ct\u005ct Cadena no valida. Linea "+ token.beginLine+" \u005cn"; {if (true) return "";}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

//---------------------------------------------------------
  final public void perl() throws ParseException {
    try {
      INSTRUC();
    } catch (ParseException e) {
                mensajeSint+="Error en el programa. Linea="+token.next.beginLine+"\u005cn";
    }
  }

  final public void INSTRUC() throws ParseException {
    try {
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case pdo:
        case pfor:
        case pif:
        case pmy:
        case pour:
        case pprint:
        case pwhile:
        case ident:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case pmy:
        case pour:
          D_VAR();
          break;
        case ident:
          ASIGNACION();
          break;
        case pprint:
          PRINT();
          break;
        case pdo:
        case pfor:
        case pif:
        case pwhile:
          CICLO();
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        mensajeSint+="Error en la instruccion. Linea="+token.next.beginLine+"\u005cn";
                Token t;
        do{
            t = getNextToken();
        }while(t.kind != puncoma & t.kind != EOF);
    }
  }

  final public void D_VAR() throws ParseException {
    try {
      if (jj_2_1(3)) {
        DECINI_VAR();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case pmy:
        case pour:
          DEC_VAR();
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(puncoma);
    } catch (ParseException e) {
        mensajeSint+="Error en la sentencia de declaracion de variables. Linea="+token.next.beginLine+"\u005cn";
                Token t;
        do{
        t = getNextToken();
        }while(t.kind != puncoma & t.kind != EOF);
    }
  }

  final public void DEC_VAR() throws ParseException {
        Token variable;
    try {
      TIPO();
      variable = jj_consume_token(ident);
                        TokenAsignaciones.InsertarSimbolo(variable, -1);
    } catch (ParseException e) {
        mensajeSint+="Error en la declaracion de variables. Linea="+token.next.beginLine+"\u005cn";
                Token t;
        do{
            t = getNextToken();
        }while(t.kind != puncoma & t.kind != EOF);
    }
  }

  final public void TIPO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case pmy:
      jj_consume_token(pmy);
      break;
    case pour:
      jj_consume_token(pour);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DECINI_VAR() throws ParseException {
        int tipo;
        Token variable;
    try {
      TIPO();
      variable = jj_consume_token(ident);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case asigna:
        jj_consume_token(asigna);
        break;
      case sumasigna:
        jj_consume_token(sumasigna);
        break;
      case resasigna:
        jj_consume_token(resasigna);
        break;
      case prodasigna:
        jj_consume_token(prodasigna);
        break;
      case divasigna:
        jj_consume_token(divasigna);
        break;
      case restasigna:
        jj_consume_token(restasigna);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tipo = DER();
                        TokenAsignaciones.InsertarSimbolo(variable, tipo);
    } catch (ParseException e) {
        mensajeSint+="Error en la declaracion y asignacion de variables. Linea="+token.next.beginLine+"\u005cn";
                Token t;
        do{
            t = getNextToken();
        }while(t.kind != puncoma & t.kind != EOF);
    }
  }

  final public void ASIGNACION() throws ParseException {
    try {
      jj_consume_token(ident);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case asigna:
        jj_consume_token(asigna);
        break;
      case sumasigna:
        jj_consume_token(sumasigna);
        break;
      case resasigna:
        jj_consume_token(resasigna);
        break;
      case prodasigna:
        jj_consume_token(prodasigna);
        break;
      case divasigna:
        jj_consume_token(divasigna);
        break;
      case restasigna:
        jj_consume_token(restasigna);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      DER();
      jj_consume_token(puncoma);
    } catch (ParseException e) {
        mensajeSint+="Error en la asignacion de variables. Linea="+token.next.beginLine+"\u005cn";
                Token t;
        do{
            t = getNextToken();
        }while(t.kind != puncoma & t.kind != EOF);
    }
  }

  final public int DER() throws ParseException {
    try {
      if (jj_2_2(2)) {
        OPER_ARIT();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ident:
          jj_consume_token(ident);
          break;
        case cadena:
          jj_consume_token(cadena);
          break;
        case entero:
          jj_consume_token(entero);
          break;
        case real:
          jj_consume_token(real);
          break;
        case cadenainter:
          jj_consume_token(cadenainter);
          break;
        case pstdin:
          jj_consume_token(pstdin);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        mensajeSint+="Error en la parte derecha de la asignacion. Linea="+token.next.beginLine+"\u005cn";
                Token t;
        do{
            t = getNextToken();
        }while(t.kind != puncoma & t.kind != EOF);
    }
         {if (true) return token.kind;}
    throw new Error("Missing return statement in function");
  }

  final public void OPER_ARIT() throws ParseException {
    try {
      if (jj_2_3(10)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ident:
          jj_consume_token(ident);
          break;
        case entero:
          jj_consume_token(entero);
          break;
        case real:
          jj_consume_token(real);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ARITOP();
        OPER_ARIT();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case entero:
        case real:
        case ident:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ident:
            jj_consume_token(ident);
            break;
          case entero:
            jj_consume_token(entero);
            break;
          case real:
            jj_consume_token(real);
            break;
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
        mensajeSint+="Error en la operacion. Linea="+token.next.beginLine+"\u005cn";
                Token t;
        do{
            t = getNextToken();
        }while(t.kind != puncoma & t.kind != EOF);
    }
  }

  final public void ARITOP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case suma:
      jj_consume_token(suma);
      break;
    case resta:
      jj_consume_token(resta);
      break;
    case div:
      jj_consume_token(div);
      break;
    case producto:
      jj_consume_token(producto);
      break;
    case residuo:
      jj_consume_token(residuo);
      break;
    case exp:
      jj_consume_token(exp);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PRINT() throws ParseException {
    jj_consume_token(pprint);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case cadena:
      jj_consume_token(cadena);
      break;
    case cadenainter:
      jj_consume_token(cadenainter);
      break;
    case ident:
      jj_consume_token(ident);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case coma:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_3;
      }
      jj_consume_token(coma);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case cadena:
        jj_consume_token(cadena);
        break;
      case cadenainter:
        jj_consume_token(cadenainter);
        break;
      case ident:
        jj_consume_token(ident);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(puncoma);
  }

  final public void CICLO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case pif:
      GIF();
      break;
    case pwhile:
      GWHILE();
      break;
    case pdo:
      GDO();
      break;
    case pfor:
      GFOR();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void GIF() throws ParseException {
    try {
      jj_consume_token(pif);
      jj_consume_token(parenizq);
      OPER_REL();
      jj_consume_token(parender);
      jj_consume_token(llaveizq);
      INSTRUC();
      jj_consume_token(llaveder);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case pelse:
        jj_consume_token(pelse);
        jj_consume_token(llaveizq);
        INSTRUC();
        jj_consume_token(llaveder);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    } catch (ParseException e) {
                mensajeSint+="Error en el if. Linea="+token.next.beginLine+"\u005cn";
                Token t;
        do{
            t = getNextToken();
        }while(t.kind != puncoma & t.kind != EOF);
    }
  }

  final public void OPER_REL() throws ParseException {
        String res = "";
        Boolean b = false;
        Token v1;
        Token v2;
    try {
      if (jj_2_4(100)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ident:
          jj_consume_token(ident);
          break;
        case entero:
          jj_consume_token(entero);
          break;
        case real:
          jj_consume_token(real);
          break;
        case cadena:
          jj_consume_token(cadena);
          break;
        case cadenainter:
          jj_consume_token(cadenainter);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                        v1 = token;
                        res = TokenAsignaciones.checkVariable(v1);
                        if (!res.equals(" ")) mensajeSem+=res+"\u005cn";
        b = RELOP();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ident:
          jj_consume_token(ident);
          break;
        case entero:
          jj_consume_token(entero);
          break;
        case real:
          jj_consume_token(real);
          break;
        case cadena:
          jj_consume_token(cadena);
          break;
        case cadenainter:
          jj_consume_token(cadenainter);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                        v2 = token;
                        res = TokenAsignaciones.checkVariable(v2);
                        if (!res.equals(" ")) mensajeSem+=res+"\u005cn";
                        if(b){
                                res = TokenAsignaciones.checkCompNum(v1, v2);
                                if (!res.equals(" ")) mensajeSem+=res+"\u005cn";
                        }else{
                                res = TokenAsignaciones.checkCompCad(v1, v2);
                                if (!res.equals(" ")) mensajeSem+=res+"\u005cn";
                        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case and:
          jj_consume_token(and);
          break;
        case or:
          jj_consume_token(or);
          break;
        case ylog:
          jj_consume_token(ylog);
          break;
        case olog:
          jj_consume_token(olog);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        OPER_REL();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case entero:
        case real:
        case ident:
        case cadenainter:
        case cadena:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ident:
            jj_consume_token(ident);
            break;
          case entero:
            jj_consume_token(entero);
            break;
          case real:
            jj_consume_token(real);
            break;
          case cadena:
            jj_consume_token(cadena);
            break;
          case cadenainter:
            jj_consume_token(cadenainter);
            break;
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                        v1 = token;
                        res = TokenAsignaciones.checkVariable(v1);
                        if (!res.equals(" ")) mensajeSem+=res+"\u005cn";
          b = RELOP();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ident:
            jj_consume_token(ident);
            break;
          case entero:
            jj_consume_token(entero);
            break;
          case real:
            jj_consume_token(real);
            break;
          case cadena:
            jj_consume_token(cadena);
            break;
          case cadenainter:
            jj_consume_token(cadenainter);
            break;
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                        v2 = token;
                        res = TokenAsignaciones.checkVariable(v2);
                        if (!res.equals(" ")) mensajeSem+=res+"\u005cn";
                        if(b){
                                res = TokenAsignaciones.checkCompNum(v1, v2);
                                if (!res.equals(" ")) mensajeSem+=res+"\u005cn";
                        }else{
                                res = TokenAsignaciones.checkCompCad(v1, v2);
                                if (!res.equals(" ")) mensajeSem+=res+"\u005cn";
                        }
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
                mensajeSint+="Error en la comparacion. Linea="+token.image+"\u005cn";
                Token t;
        do{
            t = getNextToken();
        }while(t.kind != puncoma & t.kind != EOF);
    }
  }

  final public Boolean RELOP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case mayor:
    case menor:
    case menigual:
    case mayigual:
    case igual:
    case dif:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case mayor:
        jj_consume_token(mayor);
        break;
      case menor:
        jj_consume_token(menor);
        break;
      case menigual:
        jj_consume_token(menigual);
        break;
      case mayigual:
        jj_consume_token(mayigual);
        break;
      case igual:
        jj_consume_token(igual);
        break;
      case dif:
        jj_consume_token(dif);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                {if (true) return true;}
      break;
    case menorcad:
    case mayorcad:
    case menigualcad:
    case mayigualcad:
    case igualcad:
    case difcad:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case menorcad:
        jj_consume_token(menorcad);
        break;
      case mayorcad:
        jj_consume_token(mayorcad);
        break;
      case menigualcad:
        jj_consume_token(menigualcad);
        break;
      case mayigualcad:
        jj_consume_token(mayigualcad);
        break;
      case igualcad:
        jj_consume_token(igualcad);
        break;
      case difcad:
        jj_consume_token(difcad);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                {if (true) return false;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void GWHILE() throws ParseException {
    try {
      jj_consume_token(pwhile);
      jj_consume_token(parenizq);
      OPER_REL();
      jj_consume_token(parender);
      jj_consume_token(llaveizq);
      INSTRUC();
      jj_consume_token(llaveder);
    } catch (ParseException e) {
        mensajeSint+="Error en el while. Linea="+token.next.beginLine+"\u005cn";
                Token t;
        do{
            t = getNextToken();
        }while(t.kind != puncoma & t.kind != EOF);
    }
  }

  final public void GDO() throws ParseException {
    try {
      jj_consume_token(pdo);
      jj_consume_token(llaveizq);
      INSTRUC();
      jj_consume_token(llaveder);
      jj_consume_token(pwhile);
      jj_consume_token(parenizq);
      OPER_REL();
      jj_consume_token(parender);
      jj_consume_token(puncoma);
    } catch (ParseException e) {
        mensajeSint+="Error en el do while. Linea="+token.next.beginLine+"\u005cn";
                Token t;
        do{
            t = getNextToken();
        }while(t.kind != puncoma & t.kind != EOF);
    }
  }

  final public void GFOR() throws ParseException {
    try {
      jj_consume_token(pfor);
      jj_consume_token(parenizq);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case pmy:
      case pour:
        DECINI_VAR();
        break;
      case ident:
        jj_consume_token(ident);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case asigna:
          jj_consume_token(asigna);
          break;
        case sumasigna:
          jj_consume_token(sumasigna);
          break;
        case resasigna:
          jj_consume_token(resasigna);
          break;
        case prodasigna:
          jj_consume_token(prodasigna);
          break;
        case divasigna:
          jj_consume_token(divasigna);
          break;
        case restasigna:
          jj_consume_token(restasigna);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        DER();
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(puncoma);
      OPER_REL();
      jj_consume_token(puncoma);
      jj_consume_token(ident);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case asigna:
        jj_consume_token(asigna);
        break;
      case sumasigna:
        jj_consume_token(sumasigna);
        break;
      case resasigna:
        jj_consume_token(resasigna);
        break;
      case prodasigna:
        jj_consume_token(prodasigna);
        break;
      case divasigna:
        jj_consume_token(divasigna);
        break;
      case restasigna:
        jj_consume_token(restasigna);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      DER();
      jj_consume_token(parender);
      jj_consume_token(llaveizq);
      INSTRUC();
      jj_consume_token(llaveder);
    } catch (ParseException e) {
        mensajeSint+="Error en el for. Linea="+token.next.beginLine+"\u005cn";
                Token t;
        do{
            t = getNextToken();
        }while(t.kind != puncoma & t.kind != EOF);
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    }
    }
    }
    if (jj_3R_7()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    }
    }
    }
    if (jj_3R_7()) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    }
    }
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) return true;
    }
    }
    if (jj_3R_6()) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_3R_9()) return true;
    if (jj_scan_token(ident)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public perlTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xffffff80,0xffffff80,0x81e4800,0x81e4800,0xc0000,0xc0000,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8024800,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc0000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xfffffe3f,0xfffffe3f,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x39c00000,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc3c00,0x33c000,0x3ffc00,0x200,0x0,0x200,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xfffffff,0xfffffff,0x800000,0x800000,0x0,0x0,0xf800,0xf800,0x3e00000,0xe00000,0xe00000,0xe00000,0x0,0x3800000,0x0,0x3800000,0x0,0x0,0x3e00000,0x3e00000,0x6c0,0x3e00000,0x3e00000,0x3e00000,0x0,0x0,0x0,0xf800,0x800000,0xf800,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public perl(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public perl(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new perlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public perl(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new perlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public perl(perlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(perlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[92];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 92; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
