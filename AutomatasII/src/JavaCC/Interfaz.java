package JavaCC;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;
import static JavaCC.perl.DIR;
import java.awt.Color;
import java.awt.Font;
import java.util.ArrayList;

/**
 *
 * @author Fernando Guerrero Montero
 */
public class Interfaz extends javax.swing.JFrame {

    /** Creates new form Interfaz */
    public Interfaz() {
        initComponents();
        this.setTitle("Analizador de Perl");
        Oyente oyente = new Oyente();
        this.jMenuItem1.addActionListener(oyente);
        this.jMenuItem2.addActionListener(oyente);
        this.jMenuItem3.addActionListener(oyente);
        this.jMenuItem4.addActionListener(oyente);
        this.jMenuItem5.addActionListener(oyente);
        this.jMenuItem6.addActionListener(oyente);
        TextLineNumber tln = new TextLineNumber(areaCodigo);
        jScrollPane5.setRowHeaderView(tln);
        //areaCodigo.setText(DIR);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaLex = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        areaSint = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        areaSem = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        areaTokens = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        areaCodigo = new javax.swing.JTextArea();
        etiquetaNombre = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        areaLex.setColumns(20);
        areaLex.setRows(5);
        jScrollPane1.setViewportView(areaLex);

        jTabbedPane1.addTab("Lexico", jScrollPane1);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        areaSint.setColumns(20);
        areaSint.setRows(5);
        jScrollPane2.setViewportView(areaSint);

        jTabbedPane1.addTab("Sintactico", jScrollPane2);

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        areaSem.setColumns(20);
        areaSem.setRows(5);
        jScrollPane3.setViewportView(areaSem);

        jTabbedPane1.addTab("Semantico", jScrollPane3);

        jPanel1.add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("TOKENS");
        jPanel3.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        jScrollPane4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        areaTokens.setColumns(20);
        areaTokens.setRows(5);
        jScrollPane4.setViewportView(areaTokens);

        jPanel3.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel3, java.awt.BorderLayout.LINE_END);

        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        areaCodigo.setColumns(20);
        areaCodigo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        areaCodigo.setRows(5);
        jScrollPane5.setViewportView(areaCodigo);

        jPanel2.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        etiquetaNombre.setText("Archivo: ");
        jPanel2.add(etiquetaNombre, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Abrir");
        jMenuItem1.setName("abrir"); // NOI18N
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Guardar como");
        jMenuItem2.setName("guardar"); // NOI18N
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Cerrar");
        jMenuItem3.setName("cerrar"); // NOI18N
        jMenu1.add(jMenuItem3);
        jMenu1.add(jSeparator1);

        jMenuItem4.setText("Salir");
        jMenuItem4.setName("salir"); // NOI18N
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Compilaci√≥n");

        jMenuItem5.setText("Compilar");
        jMenuItem5.setName("compilar"); // NOI18N
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("Optimizar");
        jMenuItem6.setName("optimizacion"); // NOI18N
        jMenu2.add(jMenuItem6);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaCodigo;
    private javax.swing.JTextArea areaLex;
    private javax.swing.JTextArea areaSem;
    private javax.swing.JTextArea areaSint;
    private javax.swing.JTextArea areaTokens;
    private javax.swing.JLabel etiquetaNombre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    protected class Oyente implements ActionListener{
        
        //protected String DIR = "C:\\Users\\Fernando Guerrero\\Desktop\\Automatas-II\\AutomatasII\\src\\archivos";

        @Override
        public void actionPerformed(ActionEvent e) {
           JMenuItem item = (JMenuItem) e.getSource();
           switch(item.getName()){
               case "abrir":
                    JFileChooser chooser = new JFileChooser(DIR);
                    FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos .pl", "pl");
                    chooser.setFileFilter(filter);
                    int returnVal = chooser.showOpenDialog(null);
                    if(returnVal == JFileChooser.APPROVE_OPTION) {
                       System.out.println("You chose to open this file: " +chooser.getSelectedFile().getName());
                       try {
                           String s = leerContenido(chooser.getSelectedFile().getAbsolutePath());
                           System.out.println(chooser.getSelectedFile().getAbsolutePath());
                           areaCodigo.setText(s);
                           etiquetaNombre.setText("Archivo: "+chooser.getSelectedFile().getName());
                       } catch (IOException ex) {
                           System.out.println("No se pudo leer el archivo.");
                       }
                    }
                    break;
               case "guardar":
                   guardar();
                   break;
               case "cerrar":
                   guardar();
                   areaCodigo.setText("");
                   areaTokens.setText("");
                   areaLex.setText("");
                   areaSint.setText("");
                   areaSem.setText("");
                   etiquetaNombre.setText("Archivo: ");
                   break;
               case "salir":
                   System.exit(0);
                   break;
               case "compilar":
                   String archivo = guardar();
                   String mensaje = Compilacion.compilar(archivo);
                   JDialog dialogo = new JDialog();
                   dialogo.setTitle("Mensaje");
                   JTextArea campoMensaje = new JTextArea(mensaje);
                   campoMensaje.setEditable(false);
                   campoMensaje.setBackground(new Color(240,240,240));
                   campoMensaje.setFont(new Font("Arial",Font.BOLD,14));
                   dialogo.add(campoMensaje);
                   dialogo.setSize(260, 100);
                   dialogo.setLocation(200, 200);
                   dialogo.setVisible(true);
                   dialogo.repaint();
                   if(archivo.equals("")) break;
                   try {
                       String s = leerContenido(DIR+"\\ErrorLex.txt");
                       areaLex.setText(s);
                   } catch (IOException ex) {
                       System.out.println("No se pudo leer el archivo lexico.");
                   }
                   try {
                       String s = leerContenido(DIR+"\\ErrorSint.txt");
                       areaSint.setText(s);
                   } catch (IOException ex) {
                       System.out.println("No se pudo leer el archivo sintactico.");
                   }
                   try {
                       String s = leerContenido(DIR+"\\ErrorSem.txt");
                       areaSem.setText(s);
                   } catch (IOException ex) {
                       System.out.println("No se pudo leer el archivo semantico.");
                   }
                   try {
                       String s = leerContenido(DIR+"\\Tokens.txt");
                       areaTokens.setText(s);
                   } catch (IOException ex) {
                       System.out.println("No se pudo leer el archivo tokens.");
                   }
                   break;
               case "optimizacion":
                   String[] texto = areaCodigo.getText().split("\n");
                   areaCodigo.setText("");
                   String[] optimizado = new String[texto.length];
                   for(int i=0;i<texto.length;i++){
                       String linea = texto[i];
                       if(linea.contains("#")){
                           optimizado[i] = "";
                           Boolean band = true;
                           for(int j=0;j<linea.length();j++){
                               if(linea.charAt(j) == '#' && band) break;
                               if(linea.charAt(j) == '\"') band=!band;
                               optimizado[i]+=linea.charAt(j);
                           }
                           continue;
                       }
                       optimizado[i] = linea;
                   }
                   /*****************************************************/
                   String[] optimizado1 = new String[optimizado.length];
                   ArrayList<String> var = new ArrayList();
                   Boolean[] usado = new Boolean[optimizado.length];
                   for(int i=0;i<optimizado.length;i++) usado[i]=false;
                   for(int i=0;i<optimizado.length;i++){
                       String linea = optimizado[i].trim();
                       if(linea.contains("$")){
                           if(linea.contains("my $") || linea.contains("our $")){
                               String[] aux = linea.trim().split(" ");
                               String aux2 = "";
                               for(int k=0;k<aux[1].length();k++){
                                   aux2+=aux[1].charAt(k);
                                   if(k+1 == aux[1].length()) continue;
                                   char c = aux[1].charAt(k+1); 
                                   if(!( (c>='a' && c<='z') || (c>='A' && c<='Z') || c=='_' || (c>='0' && c<='9') )){
                                       break;
                                   }
                               }
                               var.add(aux2);
                           }
                           else{
                               String aux = "";
                               for(int j=0;j<linea.length();j++){
                                   if(linea.charAt(j) == '$'){
                                       aux = "";
                                       for(int k=j;k<linea.length();k++){
                                           aux+=linea.charAt(k);
                                           if(k+1 == linea.length()) continue;
                                           char c = linea.charAt(k+1); 
                                           if(!( (c>='a' && c<='z') || (c>='A' && c<='Z') || c=='_' || (c>='0' && c<='9') )){
                                               break;
                                           }
                                       }
                                       for(int k=0;k<var.size();k++){
                                           if(var.get(k).equals(aux)){
                                               usado[k] = true;
                                           }
                                       }
                                   }
                               }
                           }
                       }
                       optimizado1[i] = linea;
                   }
                   /****************************************************/
                   for(String variable:var) System.out.println(variable);
                   String[] optimizado2 = new String[optimizado1.length];
                   for(int i=0;i<optimizado2.length;i++){
                       Boolean bandera = true;
                       String linea = optimizado1[i].trim();
                       if(linea.contains("my $") || linea.contains("our $")){
                           String[] aux = linea.trim().split(" ");
                           String aux2 = "";
                           for(int k=0;k<aux[1].length();k++){
                               aux2+=aux[1].charAt(k);
                               if(k+1 == aux[1].length()) continue;
                               char c = aux[1].charAt(k+1); 
                               if(!( (c>='a' && c<='z') || (c>='A' && c<='Z') || c=='_' || (c>='0' && c<='9') )){
                                   break;
                               }
                           }
                           System.out.println(aux2);
                           for(int k=0;k<var.size();k++){
                               if(var.get(k).equals(aux2)){
                                   if(!usado[k]) bandera = false;
                               }
                           }
                       }
                       if(bandera) optimizado2[i] = optimizado1[i];
                       else optimizado2[i] = "";
                   }
                   for(String linea:optimizado2){
                       if(!linea.equals("")) areaCodigo.append(linea+"\n");
                   }
           }
        }
        
        String guardar(){
            JFileChooser saver = new JFileChooser(DIR);
            saver.setApproveButtonText("Guardar");
            saver.repaint();
            FileNameExtensionFilter filter2 = new FileNameExtensionFilter("Archivos .pl", "pl");
            saver.setFileFilter(filter2);
            int returnVal2 = saver.showOpenDialog(null);
            if(returnVal2 == JFileChooser.APPROVE_OPTION) {
               System.out.println("You chose to save this file: " +saver.getSelectedFile().getName());
               try {
                   escribirContenido(saver.getSelectedFile().getAbsolutePath(), areaCodigo.getText());
                   etiquetaNombre.setText("Archivo: "+saver.getSelectedFile().getName());
                   return saver.getSelectedFile().getName();
               } catch (IOException ex) {
                   System.out.println("No se pudo guardar el archivo.");
               }
            }
            return "";
        }
        
        void escribirContenido(String archivo, String contenido) throws FileNotFoundException, IOException {
            FileWriter f = new FileWriter(archivo);
            BufferedWriter b = new BufferedWriter(f);
            b.write(contenido, 0, contenido.length());
            b.close();
        }
        
        String leerContenido(String archivo) throws FileNotFoundException, IOException {
            FileReader f = new FileReader(archivo);
            BufferedReader b = new BufferedReader(f);
            String s = "", aux = b.readLine();
            while(aux != null){
                s += aux + "\n";
                aux = b.readLine();
            }
            b.close();
            return s;
        }
      
    }
    
}