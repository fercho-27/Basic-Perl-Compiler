package JavaCC;

/* Generated By:JavaCC: Do not edit this line. perlTokenManager.java */
import java.io.*;
import java.lang.*;
import java.util.*;
import javax.swing.*;

/** Token Manager. */
public class perlTokenManager implements perlConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2800000000000L) != 0L)
         {
            jjmatchedKind = 90;
            return 16;
         }
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 6;
            return 1;
         }
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 90;
            return 85;
         }
         if ((active0 & 0x4000000000L) != 0L)
            return 134;
         if ((active1 & 0x40020L) != 0L)
            return 135;
         if ((active0 & 0x8000000000L) != 0L)
            return 136;
         if ((active0 & 0x8080000000000000L) != 0L || (active1 & 0x1000L) != 0L)
            return 137;
         if ((active0 & 0x200180000000000L) != 0L || (active1 & 0x80000L) != 0L)
            return 39;
         if ((active0 & 0x21400000000000L) != 0L || (active1 & 0x204L) != 0L)
         {
            jjmatchedKind = 90;
            return 135;
         }
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 90;
            return 25;
         }
         return -1;
      case 1:
         if ((active1 & 0x204L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 91;
               jjmatchedPos = 1;
            }
            return 138;
         }
         if ((active0 & 0x33c00000000000L) != 0L || (active1 & 0x400L) != 0L)
            return 138;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 34:
         return jjStartNfaWithStates_0(0, 38, 134);
      case 35:
         return jjStartNfaWithStates_0(0, 6, 1);
      case 37:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 38:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10040L);
      case 39:
         return jjStartNfaWithStates_0(0, 39, 136);
      case 40:
         return jjStopAtPos(0, 28);
      case 41:
         return jjStopAtPos(0, 29);
      case 42:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x2000L);
      case 43:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x800L);
      case 44:
         return jjStopAtPos(0, 36);
      case 45:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x1000L);
      case 46:
         return jjStopAtPos(0, 37);
      case 47:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4100L);
      case 58:
         return jjStopAtPos(0, 35);
      case 59:
         return jjStopAtPos(0, 34);
      case 60:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x200100000000000L, 0x80000L);
      case 61:
         jjmatchedKind = 41;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x400200000000000L, 0x100000L);
      case 91:
         return jjStopAtPos(0, 32);
      case 93:
         return jjStopAtPos(0, 33);
      case 94:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x2800000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1400000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 123:
         return jjStopAtPos(0, 30);
      case 124:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20080L);
      case 125:
         return jjStopAtPos(0, 31);
      case 126:
         return jjStopAtPos(0, 64);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         break;
      case 42:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 43:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 45:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 47:
         if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 60:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000L);
      case 61:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         break;
      case 62:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L);
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 48, 138);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 49, 138);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 53, 138);
         break;
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L);
      case 113:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 52, 138);
         break;
      case 114:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 74, 138);
         break;
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 46, 138);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 47, 138);
         break;
      case 124:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(2, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(2, 84);
         break;
      case 100:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 73, 138);
         break;
      case 116:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(2, 66, 138);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x2000000000000L, 0x0L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0x8L
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0x4L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x1000000000000L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0x10000000000000L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x0L, 0x10000000000L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 134;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 85:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(0, 2);
                  }
                  if (curChar == 36)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(3, 6);
                  }
                  break;
               case 135:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(0, 2);
                  }
                  if (curChar == 36)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(3, 6);
                  }
                  break;
               case 16:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(0, 2);
                  }
                  if (curChar == 36)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(3, 6);
                  }
                  break;
               case 134:
                  if ((0xfffffffb00000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  else if (curChar == 34)
                  {
                     if (kind > 88)
                        kind = 88;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddStates(7, 9);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAddStates(3, 6);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(122, 123);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(52, 53);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(49, 50);
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 35)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAdd(1);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 136:
                  if ((0xffffff7f00000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  else if (curChar == 39)
                  {
                     if (kind > 89)
                        kind = 89;
                  }
                  break;
               case 137:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(123, 124);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAdd(122);
                  }
                  break;
               case 138:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(0, 2);
                  }
                  if (curChar == 36)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(3, 6);
                  }
                  break;
               case 25:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(0, 2);
                  }
                  if (curChar == 36)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(3, 6);
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(1);
                  break;
               case 38:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 44:
                  if (curChar == 62 && kind > 22)
                     kind = 22;
                  break;
               case 45:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 48:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 49:
                  if ((0xfffffffb00000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 50:
                  if (curChar == 34 && kind > 88)
                     kind = 88;
                  break;
               case 51:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 52:
                  if ((0xffffff7f00000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 53:
                  if (curChar == 39 && kind > 89)
                     kind = 89;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 56:
                  if (curChar != 36)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(3, 6);
                  break;
               case 57:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(0, 2);
                  break;
               case 121:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(122, 123);
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(122);
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(123, 124);
                  break;
               case 124:
                  if (curChar == 46)
                     jjCheckNAdd(125);
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(125);
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(7, 9);
                  break;
               case 129:
                  if (curChar != 36)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddStates(3, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 85:
                  if ((0x7fffffec7ffffffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe47ffffffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(3, 6);
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 89;
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 135:
                  if ((0x7fffffec7ffffffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe47ffffffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(3, 6);
                  }
                  break;
               case 16:
                  if ((0x7fffffec7ffffffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe47ffffffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(3, 6);
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 134:
               case 49:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 0:
                  if ((0x7fffffe47ffffffL & l) != 0L)
                  {
                     if (kind > 90)
                        kind = 90;
                     jjCheckNAddStates(3, 6);
                  }
                  else if (curChar == 95)
                     jjCheckNAddStates(10, 13);
                  if (curChar == 119)
                     jjAddStates(14, 15);
                  else if (curChar == 117)
                     jjAddStates(16, 18);
                  else if (curChar == 102)
                     jjAddStates(19, 20);
                  else if (curChar == 101)
                     jjAddStates(21, 22);
                  else if (curChar == 100)
                     jjAddStates(23, 25);
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 136:
               case 52:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 138:
                  if ((0x7fffffec7ffffffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe47ffffffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(3, 6);
                  }
                  break;
               case 25:
                  if ((0x7fffffec7ffffffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe47ffffffL & l) != 0L)
                  {
                     if (kind > 91)
                        kind = 91;
                     jjCheckNAddStates(3, 6);
                  }
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 1:
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if (curChar == 107 && kind > 7)
                     kind = 7;
                  break;
               case 7:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 9:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if (curChar == 101 && kind > 8)
                     kind = 8;
                  break;
               case 15:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if (curChar == 110 && kind > 16)
                     kind = 16;
                  break;
               case 20:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if (curChar == 102 && kind > 17)
                     kind = 17;
                  break;
               case 22:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if (curChar == 121 && kind > 18)
                     kind = 18;
                  break;
               case 24:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 26:
                  if (curChar == 114 && kind > 19)
                     kind = 19;
                  break;
               case 27:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if (curChar == 116 && kind > 20)
                     kind = 20;
                  break;
               case 32:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if (curChar == 110 && kind > 21)
                     kind = 21;
                  break;
               case 39:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
               case 47:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  jjCheckNAdd(47);
                  break;
               case 54:
                  if (curChar == 95)
                     jjCheckNAddStates(10, 13);
                  break;
               case 56:
                  if ((0x7fffffe47ffffffL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(3, 6);
                  break;
               case 57:
                  if ((0x7fffffec7ffffffL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(0, 2);
                  break;
               case 71:
                  if (curChar == 100)
                     jjAddStates(23, 25);
                  break;
               case 72:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if (curChar == 116 && kind > 9)
                     kind = 9;
                  break;
               case 78:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 80:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 81:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if (curChar == 101 && kind > 10)
                     kind = 10;
                  break;
               case 83:
                  if (curChar == 111 && kind > 11)
                     kind = 11;
                  break;
               case 84:
                  if (curChar == 101)
                     jjAddStates(21, 22);
                  break;
               case 86:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 87:
                  if (curChar == 101 && kind > 12)
                     kind = 12;
                  break;
               case 88:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 89:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if (curChar == 102 && kind > 13)
                     kind = 13;
                  break;
               case 92:
                  if (curChar == 102)
                     jjAddStates(19, 20);
                  break;
               case 93:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if (curChar == 114 && kind > 14)
                     kind = 14;
                  break;
               case 95:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 97:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 98:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 99:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 100:
                  if (curChar == 104 && kind > 15)
                     kind = 15;
                  break;
               case 101:
                  if (curChar == 117)
                     jjAddStates(16, 18);
                  break;
               case 102:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 103:
                  if (curChar == 101 && kind > 23)
                     kind = 23;
                  break;
               case 104:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 107:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 108:
                  if (curChar == 115 && kind > 24)
                     kind = 24;
                  break;
               case 109:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if (curChar == 108 && kind > 25)
                     kind = 25;
                  break;
               case 113:
                  if (curChar == 119)
                     jjAddStates(14, 15);
                  break;
               case 114:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if (curChar == 110 && kind > 26)
                     kind = 26;
                  break;
               case 117:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 120:
                  if (curChar == 101 && kind > 27)
                     kind = 27;
                  break;
               case 129:
                  if ((0x7fffffe47ffffffL & l) == 0L)
                     break;
                  if (kind > 90)
                     kind = 90;
                  jjCheckNAddStates(3, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 85:
                  if ((jjbitVec2[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(55, 58);
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddStates(26, 31);
                  break;
               case 135:
                  if ((jjbitVec2[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(55, 58);
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddStates(26, 31);
                  break;
               case 16:
                  if ((jjbitVec2[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(55, 58);
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddStates(26, 31);
                  break;
               case 0:
                  if ((jjbitVec2[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(128, 55);
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddStates(32, 37);
                  break;
               case 138:
                  if ((jjbitVec2[i2] & l2) != 0L)
                     jjCheckNAdd(58);
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddStates(38, 40);
                  if ((jjbitVec2[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(55, 58);
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddStates(26, 31);
                  break;
               case 25:
                  if ((jjbitVec2[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(55, 58);
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddStates(26, 31);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 55:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(3, 6);
                  break;
               case 58:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(0, 2);
                  break;
               case 59:
                  if ((jjbitVec2[i2] & l2) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 60:
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 61:
                  if ((jjbitVec4[i2] & l2) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(0, 2);
                  break;
               case 62:
                  if ((jjbitVec5[i2] & l2) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(0, 2);
                  break;
               case 63:
                  if ((jjbitVec6[i2] & l2) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(0, 2);
                  break;
               case 64:
                  if ((jjbitVec2[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(55, 58);
                  break;
               case 65:
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddStates(26, 31);
                  break;
               case 66:
                  if ((jjbitVec6[i2] & l2) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(3, 6);
                  break;
               case 67:
                  if ((jjbitVec5[i2] & l2) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(3, 6);
                  break;
               case 68:
                  if ((jjbitVec4[i2] & l2) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAddStates(3, 6);
                  break;
               case 69:
                  if ((jjbitVec2[i2] & l2) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 70:
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddStates(41, 43);
                  break;
               case 127:
                  if ((jjbitVec2[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(128, 55);
                  break;
               case 128:
                  if ((jjbitVec1[i2] & l2) != 0L && kind > 90)
                     kind = 90;
                  break;
               case 130:
                  if ((jjbitVec3[i2] & l2) != 0L)
                     jjCheckNAddStates(32, 37);
                  break;
               case 131:
                  if ((jjbitVec6[i2] & l2) != 0L && kind > 90)
                     kind = 90;
                  break;
               case 132:
                  if ((jjbitVec5[i2] & l2) != 0L && kind > 90)
                     kind = 90;
                  break;
               case 133:
                  if ((jjbitVec4[i2] & l2) != 0L && kind > 90)
                     kind = 90;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 134 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   57, 59, 60, 56, 57, 64, 65, 122, 123, 124, 54, 69, 56, 70, 114, 117, 
   102, 104, 109, 93, 95, 85, 88, 72, 78, 83, 66, 67, 68, 61, 62, 63, 
   131, 132, 133, 66, 67, 68, 61, 62, 63, 66, 67, 68, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\72", "\54", "\56", 
"\42", "\47", "\43", "\75", "\76", "\74", "\74\75", "\76\75", "\154\164", "\147\164", 
"\154\145", "\147\145", "\75\75", "\41\75", "\145\161", "\156\145", "\53", "\55", "\57", 
"\74\74", "\76\76", "\52", "\45", "\52\52", "\53\53", "\55\55", "\176", "\41", 
"\156\157\164", "\46", "\174", "\136", "\46\46", "\174\174", "\57\57", "\141\156\144", 
"\157\162", "\53\75", "\55\75", "\52\75", "\57\75", "\45\75", "\46\75", "\174\75", 
"\136\75", "\74\74\75", "\76\76\75", null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0xfffffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[134];
private final int[] jjstateSet = new int[268];
protected char curChar;
/** Constructor. */
public perlTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public perlTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 134; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
